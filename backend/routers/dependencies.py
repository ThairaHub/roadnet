# generated by fastapi-codegen:
#   filename:  user.yaml
#   timestamp: 2025-06-01T07:38:26+00:00

from __future__ import annotations

from typing import Generic, List, Optional, TypeVar, Union

from pydantic import BaseModel, ConfigDict

from collections.abc import AsyncGenerator
import os

from fastapi import Request

from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.orm import sessionmaker

from sqlalchemy.ext.asyncio import create_async_engine
from ..setup.setup import DATABASE_URL


T = TypeVar("T")


class ResponseWrapper(BaseModel, Generic[T]):
    success: bool
    data: Optional[T]
    error: Optional[str]

    model_config = ConfigDict(from_attributes=True)


#-------------- async conn ----------------

async def async_get_db(request: Request) -> AsyncGenerator[AsyncSession, None]:

    engine = create_async_engine(DATABASE_URL, connect_args={"server_settings": {"search_path": "gis,public"}}, echo=True, future=True)
    SessionLocal = sessionmaker(engine, class_=AsyncSession, expire_on_commit=False)
    request.app.state.engine = engine
    request.app.state.sessionmaker = SessionLocal
    print("Initialized sessionmaker on first request")
        
    SessionLocal = request.app.state.sessionmaker
    async with SessionLocal() as session:
        yield session